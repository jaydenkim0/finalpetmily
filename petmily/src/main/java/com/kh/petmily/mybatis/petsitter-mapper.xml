<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace : 영역을 부르는 별칭
	parameterType : 이 명령을 실행하기 위해 필요한 데이터의 형태
	resultType : 기대되는 결과물의 형태(목록이든 아니든 dto 형태로 표기)
	
	태그때문에 못쓰게 되는 기호들은 다음의 영역으로 해결이 가능

	<![CDATA[
		SQL 구문
	]]>
	
	형태에 따라 파라미터를 다르게 설정할 수 있다
	- # 은 형태를 추론하여 자동으로 따옴표 설정 및 인코딩 처리를 수행
	- $ 는 값을 있는 그대로 출력하는 명령이므로 주로 "항목"에 사용
		- $ 는 SQL Injection 이라는 해킹공격에 매우 취약하므로 사용에 주의 
 -->

<mapper namespace="petsitter">
<!-- 펫시터 회원 가입 -->
	<!-- 펫시터 기본 정보 -->
	<insert id="regist" parameterType="petsitterDto">
		insert into pet_sitter values(
		#{pet_sitter_no},
		#{sitter_id},
		#{info},
		#{sitter_pets},
		'정상',
		'true',
		#{sitter_matching_type},
		sysdate,
		#{sitter_bankname},
		#{sitter_bank_account})
	</insert>
	
	<!-- 펫시터 스킬 -->
	<insert id="registSkills" parameterType="list">
		<foreach collection="list" item="skillsDto" open="insert all" close="select * from dual">
			into skills values(#{skillsDto.skills_name},#{skillsDto.skills_sitter_no})
		</foreach>
	</insert>
	
	<!-- 펫시터 돌봄 가능 동물 -->
	<insert id="registType" parameterType="list">
		<foreach collection="list" item="carePetTypeDto" open="insert all" close="select * from dual">
			into care_pet_type values(#{carePetTypeDto.care_name},#{carePetTypeDto.care_sitter_no})
		</foreach>
	</insert>
	
	<!-- 펫시터 돌봄 환경 -->
	<insert id="registCondition" parameterType="list">
		<foreach collection="list" item="careConditionDto" open="insert all" close="select * from dual">
			into care_condition values(#{careConditionDto.care_condition_name},#{careConditionDto.condition_sitter_no})
		</foreach>
	</insert>
	
	<!-- 펫시터 번호 미리 구해오기 -->
	<select id="getSequence" resultType="int">
		select pet_sitter_no_seq.nextval from dual
	</select>

	<!-- 소개이미지 등록 -->
	<insert id="registInfo" parameterType="infoImageDto">
		insert into info_image values
			(info_image_no_seq.nextval,
			#{info_sitter_no},
			#{uploadname},
			#{savename},
			#{filetype},
			#{filesize})
	</insert>
	
	<!-- 신분증 등록 -->
	<insert id="registIdCard" parameterType="idCardFileDto">
		insert into id_card_file values
			(id_card_image_no_seq.nextval,
			#{id_card_sitter_no},
			#{uploadname},
			#{savename},
			#{filetype},
			#{filesize})
	</insert>
	
	<!-- 증빙서류 등록 -->
	<insert id="registLicense" parameterType="licenseFileDto">
		insert into license_file values
			(license_image_no_seq.nextval,
			#{license_sitter_no},
			#{uploadname},
			#{savename},
			#{filetype},
			#{filesize})
	</insert>
	
	<!-- 통장 사본 등록 -->
	<insert id="registBank" parameterType="bankImageDto">
		insert into bank_image values
			(bank_image_no_seq.nextval,
			#{bank_sitter_no},
			#{uploadname},
			#{savename},
			#{filetype},
			#{filesize})
	</insert>
	
	<!-- 펫시터 지역 등록 -->
	<insert id="registLocation" parameterType="list">
		<foreach collection="list" item="locationDto" open="insert all" close="select * from dual">
			into location values
			(get_location_seq(),#{locationDto.location_sitter_no},#{locationDto.city},#{locationDto.area})
		</foreach>
	</insert>
	
	<!-- 등록 테스트 -->
	<insert id="testRegist" parameterType="petsitterDto">
		insert into pet_sitter values(
		#{pet_sitter_no},
		#{sitter_id},
		#{info},
		#{sitter_pets},
		'정상',
		'true',
		#{sitter_matching_type},
		sysdate)
	</insert>
	
	<insert id="testSkillRegist" parameterType="list">
		insert into skills values(#{skills_name},#{skills_sitter_no})
	</insert>
	<insert id="testSkillRegist2" parameterType="list">
		<foreach collection="list" item="skillsDto" open="insert all" close="select * from dual">
			into skills values(#{skillsDto.skills_name},#{skillsDto.skills_sitter_no})
		</foreach>
	</insert>

<!-- 펫시터 전체 조회 -->
	<select id="getListAll" resultType="petsitterVO">
		select * from petsitter where sitter_status='정상' order by pet_sitter_no desc
	</select>
	

<!-- 펫시터 정보 상세 조회 -->
	<!-- 펫시터 기본 정보 -->
	<select id="getList" parameterType="int" resultType="petsitterVO">
		select * from petsitter where pet_sitter_no=#{pet_sitter_no}
	</select>
	
	<!-- 펫시터 스킬 -->
	<select id="getSkillList" parameterType="int" resultType="skillNameDto">
		select * from petsitter_skills where pet_sitter_no=#{pet_sitter_no}
	</select>
	
	<!-- 펫시터 돌봄 가능 동물 -->
	<select id="getPetTypeList" parameterType="int" resultType="CarePetTypeNameDto">
		select * from petsitter_care_pet_type where pet_sitter_no=#{pet_sitter_no}
	</select>
	
	<!-- 펫시터 돌봄 환경 -->
	<select id="getCareConditionList" parameterType="int" resultType="CareConditionNameDto">
		select * from petsitter_care_condition where pet_sitter_no=#{pet_sitter_no}
	</select>

	<!-- 펫시터 지역 -->
	<select id="getLocationList" parameterType="int" resultType="LocationDto">
		select * from sitterlocation where pet_sitter_no=#{pet_sitter_no}
	</select>
	
	<!-- 펫시터 펫 조회 -->
	<select id="getPetList" parameterType="int" resultType="petsitterPetsVO">
		select * from petsitterpets where pet_sitter_no=#{pet_sitter_no}
	</select>


	<!-- 펫시터 서치 리스트 -->
		<resultMap type="petsitterLocationSearchVO" id="sitter">
		<result column="pet_sitter_no" property="pet_sitter_no"/>
		<result column="nick" property="nick"/>
		<result column="info" property="info"/>
		
		<collection column="pet_sitter_no" javaType="List" ofType="LocationDto" property="list" select="getLocationListMap"></collection>
	</resultMap>
		
		
	<select id="locationListAll" resultMap="sitter" parameterType="map">
		select * from (
        	select rownum rn, A.* from(
        		select distinct petsitter.* from petsitter inner join (
					select * from location 
					<if test="cityKeyword != '' and areaKeyword != ''">
						where city = #{cityKeyword} and area = #{areaKeyword}
					</if>
            	)L on petsitter.pet_sitter_no = L.location_sitter_no)A         
			where sitter_status = '정상' order by pet_sitter_no desc)
        where rn between #{start} and #{end}
	</select>
	
	<select id="getLocationListMap" resultType="locationDto" parameterType="int">
		select * from location where location_sitter_no = #{location_sitter_no}
	</select>
		
	<!-- count -->
	<select id="countlocation" resultType="int" parameterType="Map">
		select count(*) from(
	         select * from (
	            select distinct petsitter.* from 
	                petsitter inner join (
	                    select * from location 
	                    <if test="cityKeyword != '' and areaKeyword != ''">
	                        where city = #{cityKeyword}
	                        and area = #{areaKeyword}
	            		</if>     
	            )L on petsitter.pet_sitter_no = L.location_sitter_no) 
	    where sitter_status = '정상')
	</select>	
		
</mapper>








