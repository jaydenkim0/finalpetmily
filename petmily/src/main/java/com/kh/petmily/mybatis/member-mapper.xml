<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace : 영역을 부르는 별칭
	parameterType : 이 명령을 실행하기 위해 필요한 데이터의 형태
	resultType : 기대되는 결과물의 형태(목록이든 아니든 dto 형태로 표기)
	
	태그때문에 못쓰게 되는 기호들은 다음의 영역으로 해결이 가능

	<![CDATA[
		SQL 구문
	]]>
	
	형태에 따라 파라미터를 다르게 설정할 수 있다
	- # 은 형태를 추론하여 자동으로 따옴표 설정 및 인코딩 처리를 수행
	- $ 는 값을 있는 그대로 출력하는 명령이므로 주로 "항목"에 사용
		- $ 는 SQL Injection 이라는 해킹공격에 매우 취약하므로 사용에 주의 
 -->

<mapper namespace="member" >
	
		<!-- 회원가입 -->
		<insert id="regist" parameterType="memberDto">
			insert into member values(
			#{id},
			#{pw},
			#{name},
			#{nick},
			#{email},
			#{phone},
			#{post},
			#{basic_addr},
			#{extra_addr},
			0,
			'member',
			#{pets},
			sysdate,
			sysdate,
			'true',
			'true'			
			)
		</insert>
	
	<select id = "login" parameterType="memberDto" resultType="memberDto">
		select * from member where id=#{id}
	</select>
	
	<!-- 내정보조회 -->
	<select id="mylist" parameterType="String"  resultType="memberDto">
		select * from member where id=#{id}
	</select>
	
	<!-- 내정보조회 마이페이지-->
	<select id="mypage" parameterType="String"  resultType="memberDto">
		select * from member where id=#{id}
	</select>
	
	<!-- 반려동물조회 -->
	<select id="mylistpet" parameterType="String" resultType="petImagePetDto">
		select 
			P.pet_no,
			P.member_id,
			P.name,
			P.age,
			P.type,
			P.ect,
			I.pet_image_no,
			I.savename,
			I.filetype,
			I.filesize,
			I.uploadname
		from 
			pet P
			 	left outer join pet_image I
				on P.pet_no=I.pet_image_pet_no
		where 
			P.member_id=#{id}
	</select>
	
	<!-- 최종로그인 일시 업데이트 -->
	<update id="updatelastlogin" parameterType="String" >
		update member set lastlogin=sysdate where id=#{id}
	</update>
	
	<!-- 아이디찾기 -->
	<select id="findid" parameterType="memberDto" resultType="String">
		select id from member 
		where name= #{name} and email=#{email} and phone=#{phone}
	</select>

	<!--  비밀번호 변경 -->
	<update id="pwchange" parameterType="memberDto">
		update member set pw = #{pw} where email = #{email} and id =#{id}
	</update>

	<!-- 내정보 수정 -->
	<update id="mylistchange" parameterType="memberDto">
			update member set
				name = #{name},
				nick= #{nick},
				email = #{email},
				phone = #{phone},
				post = #{post},
				basic_addr = #{basic_addr},
				extra_addr = #{extra_addr}				
				where id = #{id}	
	</update>
	

	<!-- 펫등록 -->
	<insert id="pet_regist" parameterType="petDto">
		insert into pet values(pet_no_seq.nextval,#{member_id},#{name},#{age},#{type},#{ect})
	</insert>

	<!-- 회원탈퇴처리 -->
	<delete id="memberdelete" parameterType="String">
		delete from member where id=#{id} 
	</delete>
	
	<!-- 회원 탈퇴되었는지 검사 -->
	<select id="idExist" parameterType="String" resultType="int">
		select count(*) from member where id=#{id}
	</select>
	
	<!-- 펫 번호 구해오기 -->
	<select id="pet_no" resultType="int" parameterType="map">
		select pet_no from(
			select rownum as rn, E.* from (
    			select * from pet order by pet_no desc
			) E 
		)where rn=1	
	</select>
	
	<!-- 펫 이미지 등록 -->
	<select id="pet_image_regist" parameterType="petImageDto">
		insert into pet_image values(
			pet_image_no_seq.nextval,
			#{pet_image_pet_no},
			#{savename},
			#{filetype},
			#{filesize},
			#{uploadname}
		)
	</select>
	
	<!-- 해당 회원의 회원 이미지 번호 구해오기 -->
	<select id="member_image_no" parameterType="String" resultType="int"> 
		select member_image_no from member_image where member_image_member_id=#{id} 
	</select>
	
	<!-- 회원이미지 한개씩 불러오기 -->
	<select id="getmember_image" parameterType="int" resultType="memberImageDto">
		select 
			*
		from
			member_image
		where 
			member_image_no=#{member_image_no}
	</select>
	
	<!-- 펫번호로 펫 이미지 번호 구하기 -->
	<select id="pet_image_no" parameterType="int" resultType="int">
		select pet_image_no from pet_image where pet_image_pet_no=#{pet_no}
	</select>
	
	<!-- 펫이미지 한개씩 불러오기 -->
	<select id="getpet_image" parameterType="int" resultType="petImageDto">
		select 
			* 
		from
			pet_image
		where
			pet_image_no=#{pet_image_no}
	</select>
	
	<!-- 펫정보 가지고오기 -->
	<select id="getpet" parameterType="String" resultType="petImagePetDto">			
		select 
			P.pet_no,
			P.member_id,
			P.name,
			P.age,
			P.type,
			P.ect,
			I.pet_image_no,
			I.savename,
			I.filetype,
			I.filesize,
			I.uploadname
		from 
			pet P
			 	left outer join pet_image I
				on P.pet_no=I.pet_image_pet_no
		where 
			P.pet_no=#{pet_no}
	</select>
	
	<!-- 펫정보수정 -->
	<update id="petchange" parameterType="petDto">
		update pet set
				name = #{name},
				age= #{age},
				type = #{type},
				ect = #{ect}		
				where pet_no = #{pet_no}	
	</update>
	
	<!-- 회원이미지정보 -->
	<select id="getImageInfo" resultType="memberImageDto" parameterType="int">
		select * from member_image where member_image_no=#{member_image_no}
	</select>
	
	<!-- 회원 이미지 등록 -->
	<insert id="member_image_regist" parameterType="memberImageDto">
		insert into member_image values(
			member_image_no_seq.nextval,
			#{member_image_member_id},
			#{savename},
			#{filetype},
			#{filesize},
			#{uploadname}
		)
	</insert>
	
	<!-- 회원 이미지 수정 -->	
	<update id="member_image_change" parameterType="memberImageDto">
		update member_image set
			filetype=#{filetype},
			filesize=#{filesize},
			uploadname=#{uploadname}
			where member_image_no=#{member_image_no}
	</update>
	
	<!-- 펫이미지정보 -->
	<select id="getPetImageInfo" resultType="petImageDto" parameterType="int">
		select * from pet_image where pet_image_pet_no=#{pet_image_pet_no}
	</select>
	
	<!-- 펫이미지수정 -->
	<update id="pet_image_change" parameterType="petImageDto">
		update 
			pet_image 
		set
			filetype=#{filetype},
			filesize=#{filesize},
			uploadname=#{uploadname}
		where 
			pet_image_no=#{pet_image_no}
	</update>
	
	<!-- 펫이미지등록(추가) -->
	<insert id="pet_image_regist2" parameterType="petImageDto">
		insert into 
			pet_image
		values(
			pet_no_seq.nextval,
			member_id=#{member_id},
			name=#{name},
			age=#{age},
			type=#{type},
			ect=#{ect}
		)
	</insert>
	
	<!-- 펫 삭제 -->
	<delete id="pet_delete" parameterType="int">
		delete from pet where pet_no=#{pet_no}
	</delete>
	
	<!-- 펫숫자세기 -->
	<select id="pet_exist" parameterType="String" resultType="int">
		select count(*) from pet where member_id=#{id}
	</select>
	
	<!-- 펫 존재여부에 따라 멤버의 반려동물여부 값 바꾸기 -->
	<update id="pet_Yes" parameterType="String">
		update member set pets='예' where id=#{id}
	</update>
	<update id="pet_No" parameterType="String">
		update member set pets='아니오' where id=#{id}
	</update>
	
	<!-- 블랙리스트인지 검사 -->
	<select id="isBlack" parameterType="String" resultType="int">
		select count(*) from blacklist where black_id=#{id}
	</select>
	
	<!-- 경고횟수 -->
	<select id="blackcount" parameterType="String" resultType="int">
		select black_count from blacklist where black_id=#{id}
	</select>
	
	<!-- 내가 쓴 리뷰 개수 세기 -->
	<select id="getmyreviewCount" parameterType="String" resultType="int">
		select count(*) from review where review_writer=#{id}
	</select>
	
	<!-- 리뷰 상세보기 -->
	<select id="myreview_content" parameterType="int" resultType="reviewSitterDto">
		select 
			R.*,
			P.sitter_id
		from 
			review R
				inner join pet_sitter P
				on R.review_sitter_no=P.pet_sitter_no
		where
			R.review_no=#{review_no}	
	</select>
	
	<!-- 내 승인된 예약의 개수 -->
	<select id="getmyreservationCount" parameterType="String" resultType="int">
		select count(*) from reservation where member_id=#{id} and status='승인'
	</select>
	
	<!-- 내가 쓴 리뷰 -->
	<select id="myreview" parameterType="map" resultType="reviewSitterDto">
		select*from (
			select rownum as rn, A.* from(		
				select 
					R.*,
					P.sitter_id
				from 
					review R
						inner join pet_sitter P
						on R.review_sitter_no=P.pet_sitter_no
				where
					R.review_writer=#{id}
				order by
					R.review_wdate desc
			) A
		) where rn between #{start} and #{finish}
	</select>
	
	<!-- 멤버+예약+결제+리뷰 합친 예약  -->
	<select id="myreservation" parameterType="map" resultType="reservationReviewPaySitterDto">
		select * from (
			select rownum as rn, A.* from(
				select
					RS.*,
					P.status pay_status,
					R.review_no,
					to_date(to_char(RS.matching_time, 'YYYY/MM/DD'), 'YYYY/MM/DD') - to_date(to_char(sysdate, 'YYYY/MM/DD'), 'YYYY/MM/DD') gap
				from 
					reservationsitter RS
						left outer join pay P on RS.reservation_no=P.partner_order_id
						left outer join Review R on RS.reservation_no=R.review_reservation_no 
				where
					RS.member_id=#{id} and RS.reservation_status='승인'
				order by 
					RS.matching_time desc
			) A
		) where rn between #{start} and #{finish}
	</select>
	
	<!-- 내가 만든 돌봄방 개수 -->
	<select id="getmycareboardCount" parameterType="String" resultType="int">
		select count(*) from care_board where care_member_id=#{id}
	</select>
	
	<!-- 내가 만든 돌봄방 정보 -->
	<select id="mycareboard" parameterType="map" resultType="carePetsitterDto">
		select * from (
			select rownum as rn, A.* from(
				select
					CD.*,
					PS.sitter_id
				from 
					care_board CD
						left outer join pet_sitter PS on PS.pet_sitter_no=CD.care_sitter_no 
				where
					CD.care_member_id=#{id}
				order by 
					CD.wdate desc
			) A
		) where rn between #{start} and #{finish}
	</select>
	
	<!-- 내가 올린 문의/신고 개수 -->
	<select id="getmyqnaboardCount" parameterType="String" resultType="int">
		select count(*) from qna where qna_writer=#{id}
	</select>
	
	<!-- 내가 올린 문의/신고 정보 -->
	<select id="myqnaboard" parameterType="map" resultType="QnaVO">
	select*from (
		select rownum as rn, A.* from(
			select
				qna_no, qna_writer, qna_title, qna_head, qna_content, wdate,groupno, superno,
				depth, count(reply_no) replycount
			from
			(
				select
					Q.qna_no, Q.qna_writer, Q.qna_title, Q.qna_head, Q.qna_content,
					Q.wdate, Q.groupno, Q.superno, Q.depth, QR.reply_no
				from qna Q
					left outer join qna_reply QR on Q.qna_no = QR.origin
				connect by prior qna_no = superno
				start with superno=0
				order siblings by groupno desc, qna_no asc, wdate desc
			)
			where
				qna_writer=#{id}
			group by 
		    	qna_no, qna_writer, qna_title, qna_head, qna_content, wdate,
		    	groupno, superno, depth
		) A
	)
	where rn between #{start} and #{finish}
	</select>
	
	<!-- 내가 올린 Save the Pets ! 개수 -->
	<select id="getmystrayboardCount" parameterType="String" resultType="int">
		select count(*) from stray_pet where stray_writer=#{id}
	</select>
	
	<!-- 내가 Save the Pets ! 정보 -->
	<select id="mystrayboard" parameterType="map" resultType="StrayVO">
	select*from (
		select rownum as rn, A.* from(
			select
				stray_no, stray_writer, stray_title, stray_head, stray_content, wdate,groupno, superno,
				depth, count(reply_no) replycount
			from
			(
				select
					S.stray_no, S.stray_writer, S .stray_title, S.stray_head, S.stray_content,
					S.wdate, S.groupno, S.superno, S.depth, SR.reply_no
				from stray_pet S
					left outer join stray_reply SR on S.stray_no = SR.origin
				connect by prior stray_no = superno
				start with superno=0
				order siblings by groupno desc, stray_no asc, wdate desc
			)
			where
				stray_writer=#{id}
			group by 
			    stray_no, stray_writer, stray_title, stray_head, stray_content, wdate,
			    groupno, superno, depth
			) A
		)
	where rn between #{start} and #{finish}
	</select>
	
	<!-- 아이디 중복검사 -->
	<select id="userIdCheck" parameterType="String" resultType="int">
		select count(*) from member where id=#{user_id}
	</select>
	
	<!-- 이메일중복검사 -->
	<select id="emailCheck" parameterType="String" resultType="int">
		select count(*) from member where email=#{email}
	</select>
	
	<!-- 비밀번호 변경시  아이디와 이메일이 있는지 검색 -->
	<select id="passwordfind" parameterType="Map" resultType="memberDto">
		select * from member where id = #{id} and email = #{email}
	</select>
	
	<!-- 마이페이지 로딩시에 찍어줄 정보 -->
	<select id="mypage2" parameterType="String" resultType="memberDto">
		select 
			point,
			joindate,
			lastlogin
		from
			member
		where id=#{id}
	</select>
	<select id="size" parameterType="String" resultType="int">
		select count(*) from pet where member_id=#{id}
	</select>
	
	<!-- 멤버이미지개수 -->
	<select id="imagecount" parameterType="String" resultType="int">
		select count(*) from member_image where member_image_member_id=#{id}
	</select>
	
	<!-- 펫이미지개수 -->
	<select id="petimagecount" parameterType="int" resultType="int">
		select count(*) from pet_image where pet_image_pet_no=#{pet_image_pet_no}
	</select>
	
</mapper>





