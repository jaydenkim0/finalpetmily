<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="pay">
	
	<!-- 
		결제 준비 등록 구문		
	-->
<!-- 	<insert id="ready" parameterType="payDto"> -->
<!-- 		insert into pay( -->
<!-- 			pay_no, tid, cid, process_time, partner_order_id, -->
<!-- 			partner_user_id, item_name, quantity, total_amount, -->
<!-- 			status -->
<!-- 		)  -->
<!-- 		values( -->
<!-- 			pay_no_seq.nextval, -->
<!-- 			#{tid}, -->
<!-- 			#{cid}, -->
<!-- 			to_date(#{process_time}, 'YYYY-MM-DD"T"HH24:MI:SS'), -->
<!-- 			#{partner_order_id}, -->
<!-- 			#{partner_user_id}, -->
<!-- 			#{item_name}, -->
<!-- 			#{quantity}, -->
<!-- 			#{total_amount}, -->
<!-- 			'준비' -->
<!-- 		) -->
<!-- 	</insert> -->
	
	<insert id="ready" parameterType="payDto">
		merge into pay using dual on (partner_order_id = #{partner_order_id})
		
		when matched then
			
			update set 
			process_time = to_date(#{process_time}, 'YYYY-MM-DD"T"HH24:MI:SS')
			where partner_order_id = #{partner_order_id}
			
		when not matched then
		
			insert ( 
	 			pay_no, tid, cid, process_time, partner_order_id, 
	 			partner_user_id, item_name, quantity, total_amount, 
	 			status 
	 		)  
	 		values( 
	 			pay_no_seq.nextval, 
	 			#{tid}, 
				#{cid}, 
				to_date(#{process_time}, 'YYYY-MM-DD"T"HH24:MI:SS'), 
				#{partner_order_id}, 
				#{partner_user_id}, 
	 			#{item_name}, 
				#{quantity}, 
			#{total_amount}, 
				'준비' 
			)	
	 </insert>
	
	<!-- 
		결제 성공시 추가할 데이터 구문
	-->
	<insert id="success" parameterType="payDto">

		merge into pay using dual on (partner_order_id = #{partner_order_id})
		
		when matched then
			
			update set 
			process_time = to_date(#{process_time}, 'YYYY-MM-DD"T"HH24:MI:SS')
			where partner_order_id = #{partner_order_id}
			
		when not matched then
		
			insert ( 
	 			pay_no, tid, cid, process_time, partner_order_id, 
	 			partner_user_id, item_name, quantity, total_amount, 
	 			status, aid 
	 		)  
	 		values( 
	 			pay_no_seq.nextval, 
	 			#{tid}, 
				#{cid}, 
				to_date(#{process_time}, 'YYYY-MM-DD"T"HH24:MI:SS'), 
				#{partner_order_id}, 
				#{partner_user_id}, 
	 			#{item_name}, 
				#{quantity}, 
			#{total_amount}, 
				'완료' ,
				#{aid}
			)	
	</insert>
	
	<!-- 
		결제 취소시 추가할 데이터 구문
	-->
	<insert id="revoke" parameterType="payDto">
		merge into pay using dual on (partner_order_id = #{partner_order_id})
		
		when matched then
			
			update set 
			process_time = to_date(#{process_time}, 'YYYY-MM-DD"T"HH24:MI:SS')
			where partner_order_id = #{partner_order_id}
			
		when not matched then
		
			insert ( 
	 			pay_no, tid, cid, process_time, partner_order_id, 
	 			partner_user_id, item_name, quantity, total_amount, 
	 			status, aid 
	 		)  
	 		values( 
	 			pay_no_seq.nextval, 
	 			#{tid}, 
				#{cid}, 
				to_date(#{process_time}, 'YYYY-MM-DD"T"HH24:MI:SS'), 
				#{partner_order_id}, 
				#{partner_user_id}, 
	 			#{item_name}, 
				#{quantity}, 
			#{total_amount}, 
				'취소' ,
				#{aid}
			)	
	</insert>
	 
	<select id="list" resultType="payDto">
		select * from pay order by pay_no asc
	</select>	
	
	<select id="get" parameterType="int" resultType="payDto">
		select * from pay where pay_no = #{pay_no}
	</select>
	
<!-- 	<select id="getSequence" resultType="int"> -->
<!-- 		select pay_no_seq.nextval from dual -->
<!-- 	</select> -->

	<!-- 예약 번호로 결제 정보 조회 -->
	<select id="getPay" parameterType="int" resultType="payDto">
		select * from pay where partner_order_id =#{partner_order_id}
	</select>
	<!-- 1시간 당 요금 가져오기 -->
	<select id="getHourPayment" resultType="int">
		select payment from payinfo where payname='1시간 금액'
	</select>
</mapper>