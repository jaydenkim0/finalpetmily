<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace : 영역을 부르는 별칭
	parameterType : 이 명령을 실행하기 위해 필요한 데이터의 형태
	resultType : 기대되는 결과물의 형태(목록이든 아니든 dto 형태로 표기)
	
	태그때문에 못쓰게 되는 기호들은 다음의 영역으로 해결이 가능

	<![CDATA[
		SQL 구문
	]]>
	
	형태에 따라 파라미터를 다르게 설정할 수 있다
	- # 은 형태를 추론하여 자동으로 따옴표 설정 및 인코딩 처리를 수행
	- $ 는 값을 있는 그대로 출력하는 명령이므로 주로 "항목"에 사용
		- $ 는 SQL Injection 이라는 해킹공격에 매우 취약하므로 사용에 주의 
 -->

<mapper namespace="admin">
	
	<!-- 등록화면에 보여줄 내용 -->
	
		<!-- 전체 맴버 회원수 -->
		<select id="membercount" resultType="int">
			select count(*) from member
		</select>
		
		<!-- 전체 펫시터수 -->
		<select id="petsittercount" resultType="int">
			select count(*) from petsitter where grade ='petsitter'
		</select>
		
		<!-- 전체 관리자수 -->
		<select id="admincount" resultType="int">
			select count(*) from member where grade ='admin'
		</select>
	
		<!-- 어제 가입한 회원 수 -->
		<select id="memberJoinall" resultType="int">
			select 
				count(*) 
			from 
				member 
			where 
				grade='member'
				and joindate between 
    				To_char(sysdate-1, 'YYYY/MM/DD') 
    				and 
    				To_char(sysdate, 'YYYY/MM/DD')		
		</select>
	
		<!-- 어제 펫시터 신청 수  -->
		<select id="petsitterApplyup" resultType="int">
			select 
				count(*) 
			from 
				petsitter 
			where 
				grade = 'member' 
				and  joindate between 
    				To_char(sysdate-1, 'YYYY/MM/DD') 
    				and 
    				To_char(sysdate, 'YYYY/MM/DD')
		</select>
		
		<!-- 어제 신고 게시물의 수 -->
		<select id="blackqnacount" resultType="int">
			select 
				count(*) 
			from 
				qna 
			where 
				qna_title = '신고합니다'
				and  wdate between 
    				To_char(sysdate-1, 'YYYY/MM/DD') 
    				and 
    				To_char(sysdate, 'YYYY/MM/DD')
		</select>
		
		<!-- 어제 경고당한 회원 수 -->
		<select id="blacklistmembercount" resultType="int">
			select 
				count(*) 
			from 
				blacklistcontent 
			where 
				black_content_grade = 'member' 
	   			and black_wdate between 
	   				To_char(sysdate-1, 'YYYY/MM/DD') 
	   				and 
	   				To_char(sysdate, 'YYYY/MM/DD')
		</select>
	
		<!-- 어제 경고당한 펫시터 수 -->
		<select id="blacklistpetsittercount" resultType="int">
			select 
				count(*) 
			from 
				blacklistcontent 
			where 
				black_content_grade = 'petsitter' 
	   			and black_wdate between 
	   				To_char(sysdate-1, 'YYYY/MM/DD') 
			   		and 
			   		To_char(sysdate, 'YYYY/MM/DD')
		</select>
	
		<!-- 저번달 매출 -->
		<!-- 어제 매출 -->
		
		<!-- 저번달 결제건 수 -->
		<!-- 어제 결제건 수 -->	
	
	
	<!--  회원관리 -->	
		
		<!-- 회원 디테일 페이지 불러오기 -->
		<select id="getMemberdetail" resultType="MemberVO">
			select * from memberB where id = #{id}
		</select>
		<!-- 회원 디테일 페이지에 들어갈 반려동물목록 -->
		<select id="getPets" resultType="petDto">
			select * from pet where member_id = #{id}
		</select>
		
		<!-- 블랙리스트 회원 탈퇴 (삭제) -->
		<delete id="memberdelete" parameterType="String">
			delete member where id = #{id}
		</delete>		
		
		<!-- 회원 페이징 서치 리스트 -->
		<select id="memberListAll" resultType="memberVO" parameterType="Map">
			select * from (
				select rownum rn, A.* from(
					select * from memberB
						<if test="searchOption != null and keyword != null">
							where ${searchOption} like '%'||#{keyword}||'%'
						</if>
					order by joindate desc
					)A
				) where rn between #{start} and #{end}	
		</select>
		
		<!-- count -->
		<select id="countArticle" resultType="int" parameterType="Map">
			select count(*) from
			memberB		
				<if test="searchOption != null and keyword != null">
					where ${searchOption} like '%'||#{keyword}||'%'
				</if>			
			order by joindate desc
		</select>	
	
	
	
	
	<!-- 펫시터관리 -->	
		<!-- 
			펫시터리스트 불러오가
			member 와 pet_sitter inner join으로 view 만들어 놓음 			
		-->
		<select id="petsitterList"  resultType="petsitterVO">
			select * from petsitter where grade = 'petsitter' and sitter_status = '정상' order by sitter_joindate desc
		</select>
		
		<!-- 휴면 펫시터 리스트 -->
		<select id="petsleepList"  resultType="petsitterVO">	
			select * from petsitter where grade = 'petsitter' and sitter_status = '휴면' order by sitter_joindate desc
		</select>
		
		
		<!-- 펫시터 신청한 회원 리스트 -->
	 	<select id="petsitterApplyList"  resultType="petsitterVO">	
			select * from petsitter where grade = 'member' order by sitter_joindate desc
		</select> 
		
		
		<!-- 펫시터 승인 -->
		<update id="petsitterApply" parameterType="String">
			update member set grade = 'petsitter' where id = #{sitter_id}
		</update>
						
		
		<!-- 펫시터 거부 테이블에서 삭제  -->		
		<delete id="petsitterNegative" parameterType="String">
			delete pet_sitter where sitter_id = #{sitter_id}
		</delete>		
				<!-- 지역삭제 -->
				<delete id="locationNegative" parameterType="int">
					delete location where location_sitter_no = #{sitter_no}
				</delete>
				<!-- 돌봄가능 동물 삭제 -->
				<delete id="carePetTypeNegative" parameterType="int">
					delete care_pet_type where care_sitter_no = #{sitter_no}
				</delete>
				<!-- 스킬삭제 -->
				<delete id="skillsNegative" parameterType="int">
					delete skills where skills_sitter_no = #{sitter_no}
				</delete>
				<!-- 환경삭제 -->
				<delete id="careConditionNegative" parameterType="int">
					delete care_condition where condition_sitter_no = #{sitter_no}
				</delete>
		
		
		<!-- 펫시터 단일 검색  -->
		<select id="petsitterSearchOne"  parameterType="String" resultType="petsitterVO">
			select * from petsitter where grade = 'petsitter' and sitter_id =#{sitter_id} 	
		</select>
		
		
				<!-- 페시터 회원 정보 (단일조회)  -->
				<select id="getPetsitterdetail" resultType="petsitterVO">
					select * from petsitter where pet_sitter_no = #{pet_sitter_no}				
				</select>
				<!-- 펫시터 회원정보 (지역)  -->
				<select id="getPetsitterdetailLocation" resultType="locationDto">
					select * from sitterlocation where pet_sitter_no = #{pet_sitter_no}	
				</select>	
				<!-- 펫시터 회원정보 (돌봄가능동물)  -->
				<select id="getPetsitterdetailCarePet" resultType="carePetTypeNameDto">
					select * from petsitter_care_pet_type where pet_sitter_no = #{pet_sitter_no}	
				</select>
				<!-- 펫시터 회원정보 (스킬)  -->
				<select id="getPetsitterdetailSkills" resultType="skillNameDto">
					 select * from petsitter_skills where pet_sitter_no = #{pet_sitter_no}	
				</select>
				<!-- 펫시터 회원정보 (펫시터 환경)  -->
				<select id="getPetsitterdetailCareCondition" resultType="careConditionNameDto">
					select * from petsitter_care_condition where pet_sitter_no = #{pet_sitter_no}	
				</select>
		
		
		
		
		
		<!-- 펫시터 상태 변경 등록 -->
		<update id="sitter_status" parameterType="petsitterDto">
			update pet_sitter set sitter_status = #{sitter_status} where sitter_id = #{sitter_id}
		</update>	
		
		<!--  펫시터 옵션 : 돌봄가능동물-->
				<!-- 불러오기 -->
				<select id="getCarePetType"  resultType="carePetTypeNameDto">
					select * from care_pet_type_name order by care_type_no asc
				</select>				
				<!-- 등록하기 -->
				<insert id="carePetType" parameterType="String">
					insert into care_pet_type_name values(
					care_type_no_seq.nextval, #{care_type})
				</insert>
				<!-- 삭제하기 -->
				<delete id="carePetTypeDelete" parameterType="int">
					delete care_pet_type_name where 
					care_type_no = #{care_type_no}
				</delete>
				
		<!-- 펫시터 옵션 : 스킬 이름  -->
				<!-- 불러오기 -->
				<select id="getPetSkills" resultType="skillNameDto">
					select * from skill_name order by skill_no asc
				</select>
				<!-- 등록하기 -->
				<insert id="petSkillNameI" parameterType="String">
					insert into skill_name values(skill_no_seq.nextval, #{skill_name} ) 
				</insert>
				<!-- 삭제하기 -->
				<delete id="petSkillNameD" parameterType="int">
					delete skill_name where
					skill_no = #{skill_no}
				</delete>
				
		<!-- 펫시터 옵션 : 환경 목록  -->
				<!-- 불러오기 -->
				<select id="getPetCareCondition" resultType="careConditionNameDto">
					select * from care_condition_name order by care_condition_no asc
				</select>
				<!-- 등록하기 -->
				<insert id="petCareConditionI" parameterType="String">
					insert into care_condition_name values (
					care_condition_no_seq.nextval,
					#{care_condition_name})
				</insert>
				<!-- 삭제하기 -->
				<delete id="petCareConditionD" parameterType="int">
					delete care_condition_name where
					care_condition_no = #{care_condition_no}
				</delete>
		
		<!-- 펫시터 등록 이미지 가지고 오기 -->
				<!-- 펫시터 가진 소개정보가 몇개인지 가지고오기 -->
				<select id="sitterInfoimage" parameterType="int" resultType="infoImageDto">
					select * from info_image where info_sitter_no = #{pet_sitter_no}
				</select>
				<!-- 소개정보 한개씩 불러오기 -->
				<select id="getInfoImage" parameterType="int" resultType="infoImageDto">
					select * from info_image where info_image_no = #{info_image_no}
				</select>

				<!-- 펫시터가 갖고있는 신분증 정보 찾기 -->				
				<select id="sitterIdcardimg" parameterType="int"
				resultType="idCardFileDto">
					select * from id_card_file where id_card_sitter_no = #{pet_sitter_no}
				</select>
				<!-- 신분증이미지 가지고 오기 : 1장 -->
				<select id="getSitteridcardimage" parameterType="int"
				resultType="idCardFileDto">
					select * from id_card_file where id_image_no = #{id_image_no}
				</select>				
				
				<!-- 펫시터가 갖고 있는 라이센스 정보 찾기 -->
				<select id="sitterLicenseimge" parameterType="int"
				resultType="licenseFileDto">
					select * from license_file where license_sitter_no = #{pet_sitter_no}
				</select>
				<!-- 증빙서류이미지 가지고 오기 : 1장  -->
				<select id="getSitterLicenseimge" parameterType="int"
				resultType="licenseFileDto">
					select * from license_file where license_image_no = #{license_image_no}
				</select>
				
				<!-- 펫시터가 갖고 있는 통장 사본 정보 찾기 -->
				<select id="sitterBankimge" parameterType="int" 
				resultType="bankImageDto">
					select * from bank_image where bank_sitter_no = #{pet_sitter_no}
				</select>				
				<!-- 통장사본이미지 가지고 오기 : 1장  -->
				<select id="getSitterBankimge" parameterType="int" 
				resultType="bankImageDto">
					select * from bank_image where bank_image_no = #{bank_image_no}
				</select>		

		
				<!-- 펫시터 페이징 리스트 -->			
				<select id="petsitterListAll" resultType="petsitterVO" parameterType="Map">
					select * from (
						select rownum rn, A.* from(
							select * from petsitter  where grade = 'petsitter' 
								<if test="searchOption != null and keyword != null">
									and ${searchOption} like '%'||#{keyword}||'%'
								</if>
							order by sitter_joindate desc
							)A
						) where rn between #{start} and #{end}	
				</select>			
				<!-- 펫시터 페이징 카운터 리스트 -->
				<select id="countAriclePetsitter" resultType="int" parameterType="Map">
					select count(*) from
					petsitter	where grade = 'petsitter' 	
						<if test="searchOption != null and keyword != null">
							and ${searchOption} like '%'||#{keyword}||'%'
						</if>			
					order by sitter_joindate desc
				</select>	
				
				
				<!-- 펫시터 신청 페이징 리스트 -->						
				<select id="petsitterApplyListAll" resultType="petsitterVO" parameterType="Map">
					select * from (
						select rownum rn, A.* from(
							select * from petsitter where grade = 'member' 
								<if test="searchOption != null and keyword != null">
									and ${searchOption} like '%'||#{keyword}||'%'
								</if>
							order by sitter_joindate desc
							)A
						) where rn between #{start} and #{end}	
				</select>				
				<!-- 펫시터 신청 페이징 카운터 리스트 -->
				<select id="countAriclePetsitterApply" resultType="int" parameterType="Map">
					select count(*) from
					petsitter	where grade = 'member' 	
						<if test="searchOption != null and keyword != null">
							and ${searchOption} like '%'||#{keyword}||'%'
						</if>			
					order by sitter_joindate desc
				</select>	
				
				<!-- 펫시터 휴면 페이징 리스트 -->				
				<select id="petsitterSleepListAll" resultType="petsitterVO" parameterType="Map">
					select * from (
						select rownum rn, A.* from(
							select * from petsitter where sitter_status = '휴면'
								<if test="searchOption != null and keyword != null">
									and ${searchOption} like '%'||#{keyword}||'%'
								</if>
							order by sitter_joindate desc
							)A
						) where rn between #{start} and #{end}	
				</select>				
				<!-- 펫시터 휴면 페이징 카운터 리스트 -->
				<select id="countAriclePetsitterSleep" resultType="int" parameterType="Map">
					select count(*) from
					petsitter	where sitter_status = '휴면'	
						<if test="searchOption != null and keyword != null">
							and ${searchOption} like '%'||#{keyword}||'%'
						</if>			
					order by sitter_joindate desc
				</select>	
		
	
	<!-- 블랙리스트 -->
		<!-- 블랙리스트 펫시터 불러오기 -->
		<select id="getSitterBlackList" resultType="blackListDto">
			select * from blacklist where black_grade ='petsitter' order by black_no desc
		</select>
		
		<!-- 블랙리스트 회원 불러오기 -->
		<select id="getMemberBlackList" resultType="blackListDto">
			select * from blacklist where black_grade ='member' order by black_no desc
		</select>
		

		<!-- 블랙리스트 펫시터 등록 -->
		<insert id="blackList" parameterType="petsitterVO">
		merge into blacklist using dual on(black_id = #{sitter_id})
		
		when matched then
		
			update set 
				black_count = black_count + 1
			where black_id = #{sitter_id}
		
		when not matched then
		
			insert values(
			 black_no_seq.nextval,
			#{sitter_id},
			#{name},
			#{phone},
			#{grade},			
			1	
			)
		</insert>
		<!-- 블랙리스트 회원 등록 -->
		<insert id="blackListMember" parameterType="blackListDto">
			merge into blacklist using dual on(black_id = #{black_id})
			
			when matched then
			
				update set 
					black_count = black_count + 1
				where black_id = #{black_id}
			
			when not matched then
			
				insert values(
				 black_no_seq.nextval,
				#{black_id},
				#{black_name},
				#{black_phone},
				#{black_grade},			
				1	
			)
		</insert>
		<!-- 블랙리스트 -->
		<insert id="blackListContent"  parameterType="blackListContentDto" >
			insert into blackListContent values(
			blackListContent_no_seq.nextval,
			#{black_content_id},
			#{black_content},
			sysdate,
			#{black_content_grade}
			)
		</insert>
		
	
		<!-- 블랙리스트 여부 검사 -->
		<select id="blackLsitcheck" parameterType="String" resultType="int">
			select count(*) from blacklist where black_id = #{id}		
		</select>
		
		<!-- 블랙리스트에서 삭제 -> 정상 회원 및 정상 펫시터로 돌아감 -->
		<delete id="blackListdelete" parameterType="String">
			delete blacklist where black_id = #{id}
		</delete>
		
		<!-- 블랙리스트에서 펫시터 삭제할때 등급변경 -->
		<!-- 펫시터 -> 회원으로 변경 -->
		<update id="petsittersecession" parameterType="String">
			update member set grade = 'member' where id = #{sitter_id}
		</update>
	
		<!-- 블랙리스트 디테일 페이지 내용 불러오기 -->
		<select id="blackListdetailSearch" parameterType="String" 
		resultType="petsitterVO">
			select * from blackListall where black_id = #{id}
		</select>
		
		<!-- 
			블랙리스트에서 권한변경 
			펫시터 강제 강등시 권한이 member로 변하기 때문에 blacklist 테이블에서도 변경
		-->
		<update id="blackListgradechange" parameterType="String">
			update blacklist set black_grade = 'member' where black_id = #{sitter_id} 
		</update>
		
		<!-- 블랙리스트 컨텐츠 조회 -->
		<select id="blacklistcontent" parameterType="String"
		resultType="blackListContentDto">
			select * from blackListContent where black_content_id = #{id}
		</select>
		
		<!-- 블랙리스트에서 내용 삭제  -->
		<delete id="gradeComback" parameterType="String">
			delete blacklist where black_id = #{black_id}
		</delete>
		
		
		<!-- 경고 회원 페이징 리스트 -->
			<select id="blackMemberListAll" resultType="petsitterVO" parameterType="Map">
				select * from (
					select rownum rn, A.* from(
						select * from blackListall where black_grade = 'member'
							<if test="searchOption != null and keyword != null">
								and ${searchOption} like '%'||#{keyword}||'%'
							</if>
						order by black_no desc
						)A
					) where rn between #{start} and #{end}	
			</select>				
		<!-- 경고 회원 페이징 서치 리스트 -->
			<select id="countAricleBlackMember" resultType="int" parameterType="Map">
				select count(*) from
				blackListall where black_grade = 'member'
					<if test="searchOption != null and keyword != null">
						and ${searchOption} like '%'||#{keyword}||'%'
					</if>			
				order by black_no desc
			</select>			

		<!-- 경고 펫시터 페이징 리스트 -->	
		<select id="blackPetsitterListAll" resultType="petsitterVO" parameterType="Map">
			select * from (
				select rownum rn, A.* from(
					select * from blackListall where black_grade = 'petsitter'
						<if test="searchOption != null and keyword != null">
							and ${searchOption} like '%'||#{keyword}||'%'
						</if>
					order by black_no desc
					)A
				) where rn between #{start} and #{end}	
		</select>
		<!-- 경고 펫시터 페이징 서치 리스트 -->
		<select id="countAricleBlackPetsitter" resultType="int" parameterType="Map">
			select count(*) from
			blackListall where black_grade = 'petsitter'
				<if test="searchOption != null and keyword != null">
					and ${searchOption} like '%'||#{keyword}||'%'
				</if>			
			order by black_no desc
		</select>	
				
		<!-- 신고게시판 리스트 -->
		<select id="getBlackreport" resultType="qnaVO" parameterType="Map">
			select * from (
				select rownum rn, A.* from(
					select * from qna where qna_title = '신고합니다'
						<if test="searchOption != null and keyword != null">
							and ${searchOption} like '%'||#{keyword}||'%'
						</if>
					order by qna_no desc
					)A
				) where rn between #{start} and #{end}	
		</select>
		<!-- 신고게시판 페이징 카운트 -->
		<select id="countAriclegetBlackreport" resultType="int" parameterType="Map">
			select count(*) from
				qna where qna_title = '신고합니다'
				<if test="searchOption != null and keyword != null">
					and ${searchOption} like '%'||#{keyword}||'%'
				</if>			
			order by qna_no desc
		</select>	
		
		
		
		
	<!-- 예약 리스트 -->
		<!-- 예약 리스트 -->
			<select id="getAccountreservationList" resultType="accountVO" parameterType="Map">
				select * from (
					select rownum rn, A.* from(
						select * from reservationlist 
							<if test="searchOption != null and keyword != null">
								where ${searchOption} like '%'||#{keyword}||'%'
							</if>
						order by reservation_no desc
						)A
					) where rn between #{start} and #{end}	
			</select>
			<!-- 예약 페이징 카운트 -->
			<select id="countAriclegetAccount" resultType="int" parameterType="Map">
				select count(*) from reservationlist
					<if test="searchOption != null and keyword != null">
						where ${searchOption} like '%'||#{keyword}||'%'
					</if>			
				order by reservation_no desc
			</select>	
			
		<!-- 예약 디테일 페이지 정보 -->
		<select id="reservationstatusdetail" parameterType="int" resultType="AccountVO">
			select * from reservationdetailpage where reservation_no = #{reservation_no}
		</select>
		<!-- 결제 서비스 정보 -->
		<select id="payinfoName" parameterType="int" resultType="payinfoDto">
			select * from reservationAll where reservation_no = #{reservation_no}
		</select>
		<!-- pay 테이블 상태 정보 찍어오기 -->
		<select id="paydetail" parameterType="int"
		resultType="payDto">
			select * from pay where partner_order_id = #{reservation_no}
		</select>

		
		
		
		
		
	<!-- 정산관리 -->
		<!-- 가격 리스트 불러오기 -->
		<select id="getAccountlist" resultType="payinfoDto">
			select * from payinfo where paystatus = '가격'
		</select>
		<!-- 수수료 리스트 불러오기 -->
		<select id="getFeesList" resultType="payinfoDto">
			select * from payinfo where paystatus = '수수료'
		</select>
		<!-- 가격 옵션 등록 -->
		<insert id="accountOtionAdd" parameterType="payinfoDto">
			insert into payinfo values(
			payinfo_no_seq.nextval, 
			#{payname}, 
			#{payment},
			#{paystatus}
			)
		</insert>
		<!-- 가격 옵션 삭제 -->
		<delete id="accountoptiondelete" parameterType="int">
			delete payinfo where payinfo_no = #{payinfo_no}
		</delete>
		<!-- 가격 옵션 수정 -->
		<update id="accountoptionupdate" parameterType="payinfoDto">
			update payinfo set 	
			payment = #{payment}
			where payinfo_no = #{payinfo_no}
		</update>
	
</mapper>





